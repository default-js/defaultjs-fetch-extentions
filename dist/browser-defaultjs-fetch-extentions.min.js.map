{"version":3,"file":"browser-defaultjs-fetch-extentions.min.js","mappings":"sBAAIA,SAASC,UAAUC,OACvBF,SAASC,UAAUC,KAAOC,iBACtB,OAAO,IAAIC,WAAYC,sBAAsBC,KAAKC,OAAQ,YAC9D,E,WCHIP,SAASC,UAAUC,OACvBF,SAASC,UAAUO,IAAML,iBACrB,OAAO,IAAIC,WAAYC,sBAAsBC,KAAKC,OAAQ,gBAC9D,E,WCHIP,SAASC,UAAUQ,MACvBT,SAASC,UAAUQ,IAAMN,iBACrB,OAAO,IAAIC,WAAYC,sBAAsBC,KAAKC,OAAQ,kBAC9D,E,GCFIG,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCrBAJ,EAAoBO,EAAKH,IACH,oBAAXI,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeP,EAASI,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeP,EAAS,aAAc,CAAEQ,OAAO,GAAO,E,wDCL9D,MAQMC,EAAaC,IAElB,GAAqB,GAAjBA,EAAKC,UAAkC,GAAjBD,EAAKC,SAAe,OAAOD,EAAKE,YAAYC,OAEtE,MAAMC,EAAgBJ,EAAKK,YAAcL,EAAKK,WAAWC,OAAS,EAC5DC,EAAgBP,EAAKQ,kBAAoB,EAE/C,IAAKJ,IAAkBG,EAAe,OAAOP,EAAKE,YAAYC,OAG9D,MAAMM,EAAM,CAAC,EACb,IAAIP,EAAc,GAElB,GAAIE,EACH,IAAK,IAAIM,KAAaV,EAAKK,WAAYI,EAAI,IAAqBC,EAAUC,YAAcD,EAAUE,UAGnG,IAAK,IAAIC,KAAQb,EAAKc,WACrB,GAAqB,GAAjBD,EAAKZ,SAAe,CACvB,MAAMU,EAAWE,EAAKF,SACtB,QAA6B,IAAlBF,EAAIE,GACdF,EAAIE,GAAYZ,EAAUc,OACpB,CACN,QAAkC,IAAvBJ,EAAIE,GAAUI,KAAsB,CAC9C,IAAIC,EAAMP,EAAIE,GACdF,EAAIE,GAAY,GAChBF,EAAIE,GAAUI,KAAKC,EACpB,CACAP,EAAIE,GAAUI,KAAKhB,EAAUc,GAC9B,CACD,MAA4B,GAAjBA,EAAKZ,UAAkC,GAAjBY,EAAKZ,WAAeC,GAA4BW,EAAKX,aAMvF,OAHAA,EAAcA,EAAYC,OACtBD,EAAYI,OAAS,IAAGG,EAzCT,KAyC4BP,GAExCO,CAAG,EC1CLQ,EAAc,eACdC,EAAwBD,EAAYE,cACpCC,EAA4B,YAC5BC,EAA+B,cAE/BC,EAAU/C,SAASC,UAAU+C,KACnChD,SAASC,UAAU+C,KAAO7C,iBAEtB,MAAM8C,EAAU3C,KAAK2C,QACfC,EAAcD,EAAQE,IAAIT,IAAgBO,EAAQE,IAAIR,GAE5D,IAAIS,GAAgB,EACpB,GAAGF,EACCE,EAAgBP,EAA0BQ,KAAKH,OAC/C,CACA,MAAMI,EAAM,IAAIC,IAAIjD,KAAKgD,IAAKE,UAC9BJ,EAAgBN,EAA6BO,KAAKC,EAAIG,SAC1D,CAEA,OAAOL,GD2Ba,iBADRM,QC1B2BpD,KAAKG,SD2BdiD,EA7CpB,CAACA,IACC,IAAItD,WACLC,gBAAgBqD,EAAS,mBA2CIC,CAAMD,IAE1ClC,EAAUkC,IC7BuCX,EAAQa,KAAKtD,MD0BtE,IAAgBoD,CCzBhB,C","sources":["webpack://@default-js/defaultjs-fetch-extentions/./src/HTML.js","webpack://@default-js/defaultjs-fetch-extentions/./src/SVG.js","webpack://@default-js/defaultjs-fetch-extentions/./src/XML.js","webpack://@default-js/defaultjs-fetch-extentions/webpack/bootstrap","webpack://@default-js/defaultjs-fetch-extentions/webpack/runtime/make namespace object","webpack://@default-js/defaultjs-fetch-extentions/./node_modules/@default-js/defaultjs-common-utils/src/converter/XmlToJson.js","webpack://@default-js/defaultjs-fetch-extentions/./src/XmlAsJson.js"],"sourcesContent":["if(!Response.prototype.html)\nResponse.prototype.html = async function(){\n    return new DOMParser().parseFromString(await this.text(), \"text/html\");\n};","if(!Response.prototype.html)\nResponse.prototype.svg = async function(){\n    return new DOMParser().parseFromString(await this.text(), \"image/svg+xml\");\n};","if(!Response.prototype.xml)\r\nResponse.prototype.xml = async function(){\r\n    return new DOMParser().parseFromString(await this.text(), \"application/xml\");\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const ATTRIBUTE_PRFIX = \"@\";\r\nconst TEXTCONTENT = \"@\";\r\n\r\nconst parse = (content) => {\r\n\tconst parser = new DOMParser();\r\n\treturn parser.parseFromString(content, \"application/xml\");\r\n};\r\n\r\nconst xmlToJson = (node) => {\r\n\t// Create the return object\r\n\tif (node.nodeType == 3 || node.nodeType == 4) return node.textContent.trim();\r\n\r\n\tconst hasAttributes = node.attributes && node.attributes.length > 0;\r\n\tconst hasChildNodes = node.childElementCount > 0;\r\n\r\n\tif (!hasAttributes && !hasChildNodes) return node.textContent.trim();\r\n\r\n\t// process childs\r\n\tconst obj = {};\r\n\tlet textContent = \"\";\r\n\t// element do attributes\r\n\tif (hasAttributes) {\r\n\t\tfor (let attribute of node.attributes) obj[`${ATTRIBUTE_PRFIX}${attribute.nodeName}`] = attribute.nodeValue;\r\n\t}\r\n\r\n\tfor (let item of node.childNodes) {\r\n\t\tif (item.nodeType == 1) {\r\n\t\t\tconst nodeName = item.nodeName;\r\n\t\t\tif (typeof obj[nodeName] === \"undefined\") {\r\n\t\t\t\tobj[nodeName] = xmlToJson(item);\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof obj[nodeName].push === \"undefined\") {\r\n\t\t\t\t\tvar old = obj[nodeName];\r\n\t\t\t\t\tobj[nodeName] = [];\r\n\t\t\t\t\tobj[nodeName].push(old);\r\n\t\t\t\t}\r\n\t\t\t\tobj[nodeName].push(xmlToJson(item));\r\n\t\t\t}\r\n\t\t} else if (item.nodeType == 3 || item.nodeType == 4) textContent = textContent + item.textContent;\r\n\t}\r\n\r\n\ttextContent = textContent.trim();\r\n\tif (textContent.length > 0) obj[TEXTCONTENT] = textContent;\r\n\r\n\treturn obj;\r\n};\r\n\r\nexport default (content) => {\r\n\tif (typeof content === \"string\") content = parse(content);\r\n\r\n\treturn xmlToJson(content);\r\n};\r\n","import xmlToJson from \"@default-js/defaultjs-common-utils/src/converter/XmlToJson\";\n\nconst CONTENTTYPE = \"Content-Type\";\nconst CONTENTTYPE_LOWERCASE = CONTENTTYPE.toLowerCase();\nconst ALLOWED_CONTENTTYPE_REGEX = /.*xml.*/ig\nconst ALLOWED_FILE_EXTENTION_REGEX = /.+\\.(xml)/ig\n\nconst orgJson = Response.prototype.json;\nResponse.prototype.json = async function(){\n\n    const headers = this.headers;\n    const contentType = headers.get(CONTENTTYPE) || headers.get(CONTENTTYPE_LOWERCASE);\n\n    let convertToJson = false;\n    if(contentType)\n        convertToJson = ALLOWED_CONTENTTYPE_REGEX.test(contentType)\n    else{\n        const url = new URL(this.url, location);\n        convertToJson = ALLOWED_FILE_EXTENTION_REGEX.test(url.pathname);\n    }\n\n    return convertToJson ? xmlToJson(await this.xml()) : orgJson.call(this);\n};\n    "],"names":["Response","prototype","html","async","DOMParser","parseFromString","this","text","svg","xml","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","xmlToJson","node","nodeType","textContent","trim","hasAttributes","attributes","length","hasChildNodes","childElementCount","obj","attribute","nodeName","nodeValue","item","childNodes","push","old","CONTENTTYPE","CONTENTTYPE_LOWERCASE","toLowerCase","ALLOWED_CONTENTTYPE_REGEX","ALLOWED_FILE_EXTENTION_REGEX","orgJson","json","headers","contentType","get","convertToJson","test","url","URL","location","pathname","content","parse","call"],"sourceRoot":""}